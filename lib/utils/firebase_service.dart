// lib/utils/notification_service.dart

import 'dart:io';
// import 'package:datex/features/main/widgets/notify_count_widget.dart';
// import 'package:datex/utils/injectable/configurator.dart';
import 'package:homehero/features/main/bloc/main_bloc.dart';
import 'package:homehero/utils/bloc_utils.dart';
import 'package:homehero/utils/injectable/configurator.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
// import 'package:flutter_app_badge/flutter_app_badge.dart';
import 'package:shared_preferences/shared_preferences.dart';
// import 'package:datex/utils/bloc_utils.dart';
// import 'package:datex/features/main/bloc/main_bloc.dart';

class NotificationService {
  NotificationService._internal();
  static final NotificationService instance = NotificationService._internal();

  NotificationService();

  final FlutterLocalNotificationsPlugin _plugin = FlutterLocalNotificationsPlugin();
  bool _initialized = false;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞, –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø—Ä–∞–≤
  Future<void> init() async {
    if (_initialized) return;

    // 1) Android 13+ permission
    if (Platform.isAndroid) {
      final status = await Permission.notification.request();
      if (status != PermissionStatus.granted) {
        print('üö´ Android: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      }
    }

    // 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞
    const androidInit = AndroidInitializationSettings('@mipmap/ic_launcher');
    const iosInit = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );
    await _plugin.initialize(
      const InitializationSettings(android: androidInit, iOS: iosInit),
      onDidReceiveNotificationResponse: (_) {
        // —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ —Ç–∞–ø—É
      },
    );

    // 3) –°–æ–∑–¥–∞—ë–º Android-–∫–∞–Ω–∞–ª (Oreo+)
    const channel = AndroidNotificationChannel(
      'default_chanel',
      '–í—ã—Å–æ–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      importance: Importance.max,
      showBadge: true,
      sound: RawResourceAndroidNotificationSound('ntf_sound'),
      playSound: true,
    );
    await _plugin.resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()?.createNotificationChannel(channel);

    // 4) iOS: —É–¥–∞–ª—ë–Ω–Ω—ã–µ –ø—É—à–∏ + –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ foreground
    if (Platform.isIOS) {
      final settings = await FirebaseMessaging.instance.requestPermission(
        alert: true,
        badge: true,
        sound: true,
        provisional: false,
      );
      if (settings.authorizationStatus == AuthorizationStatus.denied) {
        print('üö´ iOS: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      }
    }

    _initialized = true;
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ FCM-—Ç–æ–∫–µ–Ω–∞ (–Ω–∞ iOS ‚Äî –ø–æ—Å–ª–µ APNs)
  Future<String> getFcmToken() async {
    final token = await FirebaseMessaging.instance.getToken();
    print('üîë FCM token: $token');
    return token ?? '';
  }

  /// –°–ª—É—à–∞–µ–º –ø—É—à–∏ –≤ foreground (–æ–¥–∏–Ω –≤—ã–∑–æ–≤!)
  Future<void> listenToForeground() async {
    FirebaseMessaging.onMessage.listen((msg) async {
      print('üîî Foreground message: ${msg.data}');

      if (sharedDb.getBool('notifications') ?? true) {
        await _showLocal((msg.notification?.title ?? msg.data['title']).toString().replaceAll('#', ''), (msg.notification?.body ?? msg.data['body']))
            .toString()
            .replaceAll('#', '');
      }
    });
  }

  /// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  Future<void> _showLocal(String? title, String? body) async {
    if ((title?.isEmpty ?? true) && (body?.isEmpty ?? true)) return;

    // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    final id = DateTime.now().millisecondsSinceEpoch.remainder(100000);

    final androidDetails = AndroidNotificationDetails(
      'default_chanel',
      '–í—ã—Å–æ–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      channelDescription: 'ntf_sound',
      importance: Importance.max,
      priority: Priority.max,
      playSound: true,
      sound: RawResourceAndroidNotificationSound('ntf_sound'),
    );
    final iosDetails = DarwinNotificationDetails(
      sound: 'ntf_sound.caf',
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    await _plugin.show(
      id,
      title,
      body,
      NotificationDetails(android: androidDetails, iOS: iosDetails),
    );

    // –æ–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –∏ —Å—á—ë—Ç—á–∏–∫
    // final current = notificationCountNotifier.value;
    // notificationCountNotifier.value = current + 1;
    // final prefs = await SharedPreferences.getInstance();
    // await prefs.setInt('notifiers', current + 1);
    // FlutterAppBadge.count(current + 1);

    // –æ–±–Ω–æ–≤–ª—è–µ–º UI
    BlocUtils.mainBloc.add(MainStartEvent());
  }

  /// –°–±—Ä–æ—Å –±–µ–π–¥–∂–∞
  Future<void> clearBadge() async {
    // notificationCountNotifier.value = 0;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('notifiers', 0);
    // FlutterAppBadge.count(0);
  }
}
